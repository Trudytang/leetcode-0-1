题目:
给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。
示例 1:
输入: s = "abab"
输出: true
解释: 可由子串 "ab" 重复两次构成。

示例 2:
输入: s = "aba"
输出: false

示例 3:
输入: s = "abcabcabcabc"
输出: true
解释: 可由子串 "abc" 重复四次构成。 (或子串 "abcabc" 重复两次构成。)

解题思路一:
设字符串 s 由某个子串 t 重复 n 次构成，即：
s = t + t + t + ... + t   (n次)
那么 s + s 变成：
s + s = (t + t + ... + t) + (t + t + ... + t)
如果去掉首字符和尾字符，就会留下 t + ... + t + t + ... + t，此时 s 仍然能在新字符串中找到自己。

但是，如果 s 不是由某个子串 t 重复组成，那么 s 只能出现在 s + s 的边界处，去掉首尾字符后 s 无法再出现。

答案
class Solution {
  
    // Function to check if the string contains a repeating substring pattern.
    public boolean repeatedSubstringPattern(String str) {
        // Concatenate the string with itself.
        String doubledString = str + str;
      
        // Check if the concatenated string, with the first and last characters removed,
        // still contains the original string.
        // This technique works because if the original string is composed of repeated
        // patterns, then by removing the first and the last characters, and still being able
        // to find the original string ensures that the pattern is indeed repeating.
        return doubledString.substring(1, doubledString.length() - 1).contains(str);
    }
}

解题思路二:
KMP（Knuth-Morris-Pratt）算法中的 LPS（Longest Prefix Suffix）数组，可以用来寻找字符串的周期性。

LPS[i]：表示 s[0:i] 子串的最长相等前后缀的长度。
如果字符串 s 由一个子串 t 重复构成，那么 LPS[n-1] 就能表示这个周期 t 的长度。
如果 s.length() % (s.length() - LPS[n-1]) == 0，说明 s 由一个更短的子串 t 重复组成。
示例
以 "abcabcabcabc" 为例：

LPS[n-1] = 9，即 "abcabcabc" 是最长前后缀。
计算 n - LPS[n-1] = 12 - 9 = 3，说明 "abc" 是最短的重复子串。
12 % 3 == 0，满足条件，返回 true。

答案:
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n = s.length();
        int[] lps = new int[n]; // LPS数组
        int j = 0; // 记录最长相等前后缀的长度
        
        // 构造LPS数组
        for (int i = 1; i < n; i++) {
            while (j > 0 && s.charAt(i) != s.charAt(j)) {
                j = lps[j - 1];
            }
            if (s.charAt(i) == s.charAt(j)) {
                j++;
            }
            lps[i] = j;
        }
        
        // LPS数组的最后一个值 lps[n-1] 表示最长相等前后缀的长度
        int len = lps[n - 1];
        
        // 判断字符串是否可以由重复子串组成
        return len > 0 && n % (n - len) == 0;
    }
}
